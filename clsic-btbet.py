import wave
import struct
import random

# --- Audio Parameters ---
sample_rate = 8000  # 8kHz is standard for classic bitbeat
duration_seconds = 10
filename = "random_bitbeat.wav"

# --- Classic BitBeat Formulas ---
# The sound is generated by evaluating one of these formulas for each sample.
# 't' is a counter that increments for each audio sample.
formulas = [
    # A classic, simple chiptune-like melody
    "(t >> 6 | t) * (t >> 5 | t >> 8) >> (t >> 10) | t >> 7",

    # A more rhythmic and gritty texture
    "(t * 5 & t >> 7) | (t * 3 & t >> 10)",

    # A well-known formula creating a complex arpeggio
    "t * ((t >> 12 | t >> 8) & 63 & t >> 4)",

    # A simpler, harsh buzzing sound
    "t & t >> 8",

    # Generates a rhythmic, dance-like beat
    "t * (t >> 9 | t >> 13) & 128"
]

# Randomly select a formula for this run
chosen_formula = random.choice(formulas)
print(f"Generating audio with formula: {chosen_formula}")

# --- WAV File Generation ---
try:
    with wave.open(filename, "w") as wav_file:
        num_channels = 1  # Mono
        sampwidth = 1     # 1 byte for 8-bit audio
        num_frames = int(duration_seconds * sample_rate)

        # Set the parameters for the WAV file
        wav_file.setparams((num_channels, sampwidth, sample_rate, num_frames, "NONE", "not compressed"))

        # Generate each frame (sample) of audio
        for t in range(num_frames):
            try:
                # Evaluate the chosen formula. The result is manipulated to fit in an 8-bit range (0-255).
                result = eval(chosen_formula)
                sample = result & 255  # Use bitwise AND to keep the value within 8 bits
                
                # Pack the sample into a byte and write it to the file
                wav_file.writeframesraw(struct.pack('<B', sample))

            except (ZeroDivisionError, OverflowError):
                # If a math error occurs, just write a silent sample
                wav_file.writeframesraw(struct.pack('<B', 128))

    print(f"✅ Successfully created '{filename}'")

except Exception as e:
    print(f"❌ An error occurred: {e}")

